""" PYTHON NOTES """

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

def say_whee():
    print("Whee!")

say_whee = my_decorator(say_whee)

>>> say_whee()
Something is happening before the function is called.
Whee!
Something is happening after the function is called.

@ synbol is clled pie syntax 

def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_whee():
    print("Whee!")

>>> say_whee()
Something is happening before the function is called.
Whee!
Something is happening after the function is called.

So, @my_decorator is just an easier way of saying say_whee = my_decorator(say_whee)

Say that you have a function that accepts some arguments. Can you still decorate it? Letâ€™s try:

@my_decorator
def say_whee(name):
    print(f"Hello {name}")
Unfortunately, running this code raises an error

So we need to modify the decorator function 

def decortor(func):
    def wrapper_(*args, **kwargs):
       	print("Something is happening before the function is called.")
        func(*args, **kwargs)
        print("Something is happening after the function is called.")
    return wrapper